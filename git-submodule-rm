#!/bin/zsh

# Borrowed from:
# http://labs.timedia.co.jp/2011/03/git-removing-a-submodule.html
# http://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule

function die { echo $* 1>&2; exit 1 }
function usage {
    die Usage: $0:t modname modname...
}

zparseopts -D x=o_xtrace h=o_help n=o_dryrun q=o_quiet || usage

(($#o_help)) && usage

((ARGC)) || usage

(($#o_xtrace)) && set -x

function x {
    if (($#o_dryrun || !$#o_quiet)); then
	print -- "$@"
    fi
    if (($#o_dryrun)); then
	return 0
    fi
    "$@"
}

function git-submodule-do-rm {
    local fn noslash
    for fn in "$@"; do
	noslash=${fn%%/#}
	if git-rm-cached-submodule $noslash; then
	    git-config-remove-submodule $noslash .git/config .gitmodules ||
	    break
	fi
    done
}

function git-config-remove-submodule {
    local mod=$1; shift
    local fn url; for fn in "$@"; do
	if url=$(git config --file $fn --get submodule.$mod.url) &&
	    [[ -n $url ]]; then
	    x git config -f $fn --remove-section submodule.$mod
	fi
    done
}

function git-rm-cached-submodule {
    local mod=$1 fn;
    if fn=$(git config --file .gitmodules --get submodule.$mod.path) &&
	[[ -n $fn ]]; then
	x git rm --cached $fn
    fi
}

git-submodule-do-rm $argv
