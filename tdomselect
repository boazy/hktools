#!/usr/bin/tclsh
# -*- Tcl -*-
package require tdom
package require cmdline

# Ex. To list up reused passwords:
# tdomselect tmp/keepass.xml //entry password username url title|sort|uniq

proc usage {{rc 1}} {
    set prog [file tail $::argv0] 
    puts stderr "Usage: $prog -m asText xmlfile xpath ?sub-xpath...?"
    exit $rc
}

proc read_enc {fn args} {
    set fh [open $fn]
    if {[llength $args]} {
	fconfigure $fh {*}$args
    }
    set data [read $fh]
    close $fh
    set data
}

#========================================
catch {
    package require Tclx
    signal trap SIGPIPE exit
}

array set opts [cmdline::getoptions argv {
    {encoding.arg utf-8 "input file encoding"}
    {debug no "debug"}
    {begin.arg {} "eval before loop"}
    {end.arg {} "eval after loop"}
    {m.arg {asText} "method which is applied to extract values from selected nodes"}
    {e.arg {} "expression applied to selected node"}
    {n no "No puts"}
}]

proc tdom_select {fn xpath args} {
    uplevel #0 $::opts(begin)

    set parse_opts {}
    if {[regexp {\.html?$} $fn]} {
	lappend parse_opts -html
    }

    dom parse {*}$parse_opts [read_enc $fn -encoding $::opts(encoding)] doc
    $doc documentElement root
    set found [$root selectNodes $xpath]

    if {$::opts(e) ne ""} {
	set cmdBody $::opts(e)
    } elseif {[llength $args]} {
	set cmdBody [string map [list @M@ $::opts(m) @C@ $args ] {
	    set ls {}
	    foreach c [list @C@] {
		if {![regexp {^\./} $c]} {
		    set c "./$c"
		}
		foreach sub [$node selectNodes $c] {
		    lappend ls [$sub @M@]
		}
	    }
	    set ls
	}]
    } else {
	set cmdBody [string map [list @M@ $::opts(m)] {$node @M@}]
    }

    if {$::opts(debug)} {
	puts stderr cmdBody=$cmdBody
    }

    foreach node $found {
	set res [apply [list node $cmdBody] $node]
	if {!$::opts(n)} {
	    puts [join $res \t]
	}
    }

    uplevel #0 $::opts(end)

    set found
}

if {[llength $argv] < 2} {
    usage
}

exit [expr {[llength [tdom_select {*}$argv]] == 0}]
